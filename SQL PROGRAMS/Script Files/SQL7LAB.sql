----------------------------------------------------------------
-- Script Name:		SQL7LAB
-- Developer:       	Brandon Veasey
-- Creation Date:	11/01/2016
-- Description:		Create View, Create Index, Alter Table, and Select Commands
----------------------------------------------------------------

-- *************************************************************
-- TAL Distributors – Create View, Create Index, Alter Table
-- *************************************************************

-- A.
CREATE VIEW BVEASEY.MAJOR_CUSTOMER AS
SELECT CUSTOMER_NUM, CUSTOMER_NAME, BALANCE, CREDIT_LIMIT, REP_NUM 
FROM BVEASEY.CUSTOMERS
WHERE CREDIT_LIMIT >= 10000;

-- B.
CREATE VIEW BVEASEY.BAL_GT_CREDIT_LIMIT AS
SELECT CUSTOMER_NUM, CUSTOMER_NAME, BALANCE, CREDIT_LIMIT, REP_NUM 
FROM BVEASEY.CUSTOMERS
WHERE BALANCE > CREDIT_LIMIT;

-- C.
CREATE VIEW BVEASEY.ITEM_ORDER AS
SELECT ITEM.ITEM_NUM, DESCRIPTION, PRICE, ORDERS.ORDER_NUM, ORDERS.ORDER_DATE, ORDER_LINE.NUM_ORDERED, QUOTED_PRICE
FROM BVEASEY.ORDER_LINE, BVEASEY.ORDERS, BVEASEY.ITEM
WHERE ITEM.ITEM_NUM = ORDER_LINE.ITEM_NUM
AND ORDER_LINE.ORDER_NUM = ORDERS.ORDER_NUM
AND NUM_ORDERED IS NOT NULL;

-- D.
CREATE VIEW BVEASEY.QUOTED_PRICE_GT_100  AS
SELECT ITEM.ITEM_NUM, DESCRIPTION, ORDERS.ORDER_NUM, QUOTED_PRICE
FROM BVEASEY.ORDER_LINE, BVEASEY.ORDERS, BVEASEY.ITEM
WHERE ITEM.ITEM_NUM = ORDER_LINE.ITEM_NUM
AND ORDER_LINE.ORDER_NUM = ORDERS.ORDER_NUM
AND QUOTED_PRICE > 100;

-- E.
CREATE VIEW BVEASEY.ORDER_TOTAL AS
SELECT ORDER_NUM, SUM(NUM_ORDERED * QUOTED_PRICE)
AS TOTAL_AMOUNT 
FROM BVEASEY.ORDER_LINE, BVEASEY.ITEM
WHERE NUM_ORDERED IS NOT NULL
GROUP BY ORDER_NUM;

-- F.
CREATE VIEW BVEASEY.HIGH_COMMISSION AS
SELECT REP_NUM, LAST_NAME, COMMISSION
FROM BVEASEY.REP
WHERE COMMISSION > 20000;

-- G.
CREATE VIEW BVEASEY.ZERO_BALANCE AS
SELECT CUSTOMER_NUM, CUSTOMER_NAME, CREDIT_LIMIT, BALANCE
FROM BVEASEY.CUSTOMERS
WHERE BALANCE = 0 AND CREDIT_LIMIT IS NOT NULL;

-- H.
CREATE VIEW BVEASEY. EXPENSIVE_ITEMS AS
SELECT ITEM_NUM, DESCRIPTION, CATEGORY, PRICE
FROM BVEASEY.ITEM
WHERE PRICE >= 50;

-- I.
CREATE VIEW BVEASEY.LOW_ON_HAND AS
SELECT ITEM_NUM, DESCRIPTION, ON_HAND
FROM BVEASEY.ITEM
WHERE ON_HAND <= 10;

-- J.
CREATE VIEW BVEASEY.NULL_ORDERED AS 
SELECT ORDER_NUM, ITEM_NUM, NUM_ORDERED
FROM BVEASEY.ORDER_LINE
WHERE NUM_ORDERED IS NULL;

-- K.
CREATE INDEX ORDER_LINE_INDEX1 ON BVEASEY.ORDER_LINE(ITEM_NUM);

-- L.
CREATE INDEX ITEM_INDEX1 ON BVEASEY.ITEM(CATEGORY);

-- M.
CREATE INDEX ITEM_INDEX2 ON BVEASEY.ITEM(CATEGORY, STOREHOUSE);

-- N.
CREATE INDEX ITEM_INDEX3 ON BVEASEY.ITEM(CATEGORY DESC, STOREHOUSE);

-- O.
ALTER TABLE BVEASEY.CUSTOMERS
ADD CHECK (CREDIT_LIMIT IN (5000, 7500, 10000, 15000));

-- P.
ALTER TABLE BVEASEY.ORDER_LINE
ADD FOREIGN KEY (ORDER_NUM)REFERENCES BVEASEY.ORDERS;

-- *************************************************************
-- Colonial Adventure Tours – Create View, Create Index, Alter Table
-- *************************************************************

-- A.
CREATE VIEW BVEASEY.MAINE_BIKING_TRIPS AS
SELECT TRIP_ID, TRIP_NAME, START_LOCATION, STATE, DISTANCE, MAX_GRP_SIZE, TYPE, SEASON
FROM BVEASEY.TRIP
WHERE STATE = 'ME' AND TYPE = 'Biking';

-- B.
CREATE VIEW BVEASEY.SEPT_RESERVATION_CUSTOMER AS
SELECT RESERVATION_ID, TRIP_ID, TRIP_DATE, RESERVATION.CUSTOMER_NUM, LAST_NAME, FIRST_NAME, PHONE
FROM BVEASEY.RESERVATION, BVEASEY.CUSTOMER
WHERE RESERVATION.CUSTOMER_NUM = CUSTOMER.CUSTOMER_NUM
AND TRIP_DATE LIKE '%-09-%';

-- C.
CREATE VIEW BVEASEY.TRIP_COUNT AS 
SELECT STATE, COUNT(TRIP_NAME) AS NUM_TRIPS
FROM BVEASEY.TRIP
GROUP BY STATE;

-- D.
CREATE VIEW BVEASEY.CURRENT_HIRES AS
SELECT FIRST_NAME, LAST_NAME, HIRE_DATE
FROM BVEASEY.GUIDE
WHERE HIRE_DATE >= '2015-01-01';

-- E.
CREATE VIEW BVEASEY.SUMMER_HIKING_TRIPS AS
SELECT TRIP_ID, TRIP_NAME, TYPE, SEASON
FROM BVEASEY.TRIP
WHERE SEASON = 'Summer'AND TYPE = 'Hiking';

-- F.
CREATE VIEW BVEASEY.EARLY_SEASON_TRIPS AS
SELECT TRIP_ID, TRIP_NAME, TYPE, SEASON
FROM BVEASEY.TRIP
WHERE SEASON LIKE '%Early%';

-- G.
CREATE VIEW BVEASEY.NUM_CONN_CUSTOMERS AS
SELECT COUNT(CUSTOMER_NUM)
AS NUM_CUSTOMERS 
FROM BVEASEY.CUSTOMER
WHERE STATE = 'CT'
GROUP BY STATE;

-- H.
CREATE VIEW BVEASEY.NULL_PERSONS AS
SELECT RESERVATION_ID, TRIP_ID, NUM_PERSONS
FROM BVEASEY.RESERVATION
WHERE NUM_PERSONS IS NULL;

-- I.
CREATE VIEW BVEASEY.AVG_PADDLING_DISTANCE AS
SELECT AVG(DISTANCE)
AS AVERAGE_DISTANCE
FROM BVEASEY.TRIP
WHERE TYPE = 'Paddling';

-- J.
CREATE VIEW BVEASEY.ZERO_FEES AS
SELECT RESERVATION_ID, TRIP_ID, OTHER_FEES
FROM BVEASEY.RESERVATION
WHERE OTHER_FEES = 0;

-- K.
CREATE INDEX TRIP_INDEX1 ON BVEASEY.TRIP(TRIP_NAME);

-- L.
CREATE INDEX TRIP_INDEX2 ON BVEASEY.TRIP(TYPE);

-- M.
CREATE INDEX CUSTOMER_INDEX1 ON BVEASEY.CUSTOMER(LAST_NAME, FIRST_NAME);

-- N.
ALTER TABLE BVEASEY.RESERVATION
ADD FOREIGN KEY (CUSTOMER_NUM)REFERENCES BVEASEY.CUSTOMER;

-- O.
ALTER TABLE BVEASEY.TRIP
ADD CHECK (TYPE IN ('Biking', 'Hiking', 'Paddling'));

-- *************************************************************
-- Generate Query Results
-- *************************************************************
-- 1.
SELECT * FROM BVEASEY.MAJOR_CUSTOMER;

-- 2.
SELECT * FROM BVEASEY.BAL_GT_CREDIT_LIMIT;

-- 3.
SELECT * FROM BVEASEY.ITEM_ORDER;

-- 4.
SELECT * FROM BVEASEY.QUOTED_PRICE_GT_100;

-- 5.
SELECT * FROM BVEASEY.ORDER_TOTAL
ORDER BY TOTAL_AMOUNT DESC;

-- 6.
SELECT * FROM BVEASEY.HIGH_COMMISSION;

-- 7.
SELECT * FROM BVEASEY.ZERO_BALANCE;

-- 8.
SELECT * FROM BVEASEY.EXPENSIVE_ITEMS;

-- 9.
SELECT * FROM BVEASEY.LOW_ON_HAND;

-- 10.
SELECT * FROM BVEASEY.NULL_ORDERED;

-- 11.
SELECT * FROM BVEASEY.MAINE_BIKING_TRIPS;

-- 12.
SELECT * FROM BVEASEY.SEPT_RESERVATION_CUSTOMER;

-- 13.
SELECT * FROM BVEASEY.TRIP_COUNT
ORDER BY STATE;

-- 14.
SELECT * FROM BVEASEY.CURRENT_HIRES;

-- 15.
SELECT * FROM BVEASEY.SUMMER_HIKING_TRIPS;

-- 16.
SELECT * FROM BVEASEY.EARLY_SEASON_TRIPS;

-- 17.
SELECT * FROM BVEASEY.NUM_CONN_CUSTOMERS;

-- 18.
SELECT * FROM BVEASEY.NULL_PERSONS;

-- 19.
SELECT * FROM BVEASEY.AVG_PADDLING_DISTANCE;

-- 20.
SELECT * FROM BVEASEY.ZERO_FEES;

-- 21.
USE BVEASEY
GO
SELECT * FROM BVEASEY.INFORMATION_SCHEMA.TABLES
ORDER BY TABLE_SCHEMA + '.' + TABLE_NAME;
