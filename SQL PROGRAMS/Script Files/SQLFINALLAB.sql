----------------------------------------------------------------
-- Script Name:	   SQLFINALLAB
-- Developer:      Brandon Veasey 
-- Creation Date:  11/29/2016
-- Description:    Create Table, Insert, Update, Delete, Alter, Create View, Create Index, Create Procedure, Drop, Select, and Execute commands
--   
----------------------------------------------------------------

-- *************************************************************
-- Solmaris Condominium Group - Create, Insert, Update, Delete, Alter, Drop
-- *************************************************************

-- a.
CREATE TABLE BVEASEY.LARGE_CONDO
(LOCATION_NUM INT  NOT NULL,
UNIT_NUM CHAR(3) PRIMARY KEY NOT NULL,
BDRMS INT,
BATHS INT NOT NULL,
CONDO_FEE DECIMAL(6, 2) DEFAULT 0.00,
OWNER_NUM CHAR(5) NOT NULL);

-- b.
INSERT INTO BVEASEY.LARGE_CONDO
SELECT LOCATION_NUM, UNIT_NUM, BDRMS, BATHS, CONDO_FEE, OWNER_NUM
FROM BVEASEY.CONDO_UNIT
WHERE SQR_FT > 1500;

-- c.
UPDATE BVEASEY.LARGE_CONDO
SET CONDO_FEE = (CONDO_FEE + 150.00);

-- d.
UPDATE BVEASEY.LARGE_CONDO
SET CONDO_FEE = (CONDO_FEE + (CONDO_FEE * .01))
WHERE CONDO_FEE > 750.00;

-- e.
INSERT INTO BVEASEY.LARGE_CONDO
VALUES( '3', '605', '3', '3', '775.00', 'FE182');

-- f.
DELETE FROM BVEASEY.LARGE_CONDO
WHERE OWNER_NUM = 'AN175';

-- g.
UPDATE BVEASEY.LARGE_CONDO
SET BDRMS = NULL
WHERE UNIT_NUM = '503';

-- h.
ALTER TABLE BVEASEY.LARGE_CONDO
ADD OCCUPIED CHAR(1);

-- i.
UPDATE BVEASEY.LARGE_CONDO
SET OCCUPIED = 'Y';

-- j.
UPDATE BVEASEY.LARGE_CONDO
SET OCCUPIED = 'N'
WHERE UNIT_NUM = 'C06';

-- k.
ALTER TABLE BVEASEY.LARGE_CONDO
ALTER COLUMN CONDO_FEE DECIMAL(6, 2) NOT NULL;

-- l.
CREATE VIEW BVEASEY.SMALL_CONDO AS
SELECT LOCATION_NUM, UNIT_NUM, SQR_FT, OWNER_NUM
FROM BVEASEY.CONDO_UNIT
WHERE SQR_FT < 1100;

-- m.
CREATE VIEW BVEASEY.FEE_GT_500 AS
SELECT LOCATION_NUM, UNIT_NUM, CONDO_FEE, OWNER_NUM
FROM BVEASEY.CONDO_UNIT
WHERE CONDO_FEE > 500;

-- n.
CREATE VIEW BVEASEY.CONDO_OWNERS AS
SELECT LOCATION_NUM, UNIT_NUM, SQR_FT, CONDO_FEE, LAST_NAME
FROM BVEASEY.CONDO_UNIT, BVEASEY.OWNER
WHERE CONDO_UNIT.OWNER_NUM = OWNER.OWNER_NUM;

-- o.
CREATE VIEW BVEASEY.BIG_BDRMS_FEE AS
SELECT LOCATION_NUM, UNIT_NUM, BDRMS, CONDO_FEE, LAST_NAME
FROM BVEASEY.CONDO_UNIT, BVEASEY.OWNER
WHERE CONDO_UNIT.OWNER_NUM = OWNER.OWNER_NUM
AND CONDO_FEE > 500
AND BDRMS = 3;

-- p.
CREATE VIEW BVEASEY.AVG_CONDO_FEE AS
SELECT CAST(AVG(CONDO_FEE) AS DECIMAL(10,2))
AS AVERAGE_FEE
FROM BVEASEY.CONDO_UNIT;

-- q.
CREATE VIEW BVEASEY.FL_OWNERS AS
SELECT LOCATION_NUM, UNIT_NUM, FIRST_NAME, LAST_NAME, STATE
FROM BVEASEY.CONDO_UNIT, BVEASEY.OWNER
WHERE CONDO_UNIT.OWNER_NUM = OWNER.OWNER_NUM
AND STATE = 'FL';

-- r.
CREATE VIEW BVEASEY.DE_PA_OWNERS AS
SELECT LOCATION_NUM, UNIT_NUM, FIRST_NAME, LAST_NAME, STATE
FROM BVEASEY.CONDO_UNIT, BVEASEY.OWNER
WHERE CONDO_UNIT.OWNER_NUM = OWNER.OWNER_NUM
AND STATE IN ('DE', 'PA');

-- s.
CREATE VIEW BVEASEY.OPEN_STATUS AS
SELECT SERVICE_ID, CONDO_ID, STATUS
FROM BVEASEY.SERVICE_REQUEST
WHERE STATUS LIKE '%OPEN%';

-- t.
CREATE INDEX OWNER_INDEX1 ON BVEASEY.OWNER(STATE);

-- u.
CREATE INDEX OWNER_INDEX2 ON BVEASEY.OWNER(LAST_NAME);

-- v.
CREATE INDEX OWNER_INDEX3 ON BVEASEY.OWNER(STATE DESC, CITY);

-- w.
ALTER TABLE BVEASEY.CONDO_UNIT
ADD FOREIGN KEY (OWNER_NUM)REFERENCES BVEASEY.OWNER;

-- x.
ALTER TABLE BVEASEY.CONDO_UNIT
ADD CHECK (BDRMS IN ('1', '2', '3'));

-- y.
CREATE PROCEDURE BVEASEY.DISP_OWNER_NAME
@ownernum CHAR(5)
AS 
BEGIN
	SELECT OWNER_NUM, FIRST_NAME, LAST_NAME, STATE
	FROM BVEASEY.OWNER
	WHERE OWNER_NUM = @ownernum
END;

-- z.
CREATE PROCEDURE BVEASEY.DISP_CONDO_INFO
@sqrft INT
AS
BEGIN
	DECLARE @locationnum INT
	DECLARE @unitnum CHAR(3)
	DECLARE @condofee DECIMAL(6, 2) 
	DECLARE @ownernum CHAR(5)
	DECLARE mycursor CURSOR READ_ONLY

	FOR
		SELECT LOCATION_NUM, UNIT_NUM, CONDO_FEE, OWNER_NUM
		FROM BVEASEY.CONDO_UNIT
		WHERE SQR_FT = @sqrft

	OPEN mycursor
	FETCH NEXT FROM mycursor
	INTO @locationnum, @unitnum, @condofee, @ownernum

	WHILE @@FETCH_STATUS = 0
		BEGIN
			PRINT CAST(@locationnum AS VARCHAR) + ' ' + @unitnum + ' ' + CAST(@condofee AS VARCHAR) + ' ' + @ownernum
			FETCH NEXT FROM mycursor
			INTO @locationnum, @unitnum, @condofee, @ownernum
		END
END;

CLOSE mycursor
DEALLOCATE mycursor

-- aa.
DROP TABLE BVEASEY.NONGAME;

-- bb.
DROP TABLE BVEASEY.PADDLING;


-- *************************************************************
-- Generate Query Results 
-- ************************************************************* 

-- 1.
SELECT * FROM BVEASEY.SMALL_CONDO;

-- 2.
SELECT * FROM BVEASEY.FEE_GT_500;

-- 3.
SELECT * FROM BVEASEY.CONDO_OWNERS;

-- 4.
SELECT * FROM BVEASEY.BIG_BDRMS_FEE;

-- 5.
SELECT * FROM BVEASEY.AVG_CONDO_FEE;

-- 6.
SELECT * FROM BVEASEY.FL_OWNERS;

-- 7.
SELECT * FROM BVEASEY.DE_PA_OWNERS;

-- 8.
SELECT * FROM BVEASEY.OPEN_STATUS;

-- 9.
SELECT LOCATION.LOCATION_NUM, UNIT_NUM, CONDO_FEE, CONDO_UNIT.OWNER_NUM, FIRST_NAME, LAST_NAME 
FROM BVEASEY.LOCATION, BVEASEY.CONDO_UNIT, BVEASEY.OWNER
WHERE LOCATION.LOCATION_NUM = CONDO_UNIT.LOCATION_NUM
AND CONDO_UNIT.OWNER_NUM = OWNER.OWNER_NUM;

-- 10.
SELECT CONDO_UNIT.CONDO_ID, DESCRIPTION, STATUS, CATEGORY_DESCRIPTION
FROM BVEASEY.CONDO_UNIT, BVEASEY.SERVICE_REQUEST, BVEASEY.SERVICE_CATEGORY
WHERE SERVICE_REQUEST.CONDO_ID = CONDO_UNIT.CONDO_ID
AND SERVICE_REQUEST.CATEGORY_NUM = 6
AND SERVICE_REQUEST.CATEGORY_NUM = SERVICE_CATEGORY.CATEGORY_NUM;
 
-- 11.
SELECT SERVICE_REQUEST.CONDO_ID, LOCATION_NUM, UNIT_NUM, EST_HOURS, SPENT_HOURS, CONDO_UNIT.OWNER_NUM, LAST_NAME, CATEGORY_DESCRIPTION
FROM BVEASEY.SERVICE_REQUEST, BVEASEY.CONDO_UNIT, BVEASEY.OWNER, BVEASEY.SERVICE_CATEGORY
WHERE SERVICE_REQUEST.CATEGORY_NUM = 6
AND SERVICE_REQUEST.CONDO_ID = CONDO_UNIT.CONDO_ID
AND CONDO_UNIT.OWNER_NUM = OWNER.OWNER_NUM
AND SERVICE_REQUEST.CATEGORY_NUM = SERVICE_CATEGORY.CATEGORY_NUM;

-- 12.
SELECT FIRST_NAME, LAST_NAME
FROM BVEASEY.OWNER
WHERE OWNER_NUM IN
	(SELECT OWNER_NUM
	FROM BVEASEY.CONDO_UNIT
	WHERE BDRMS = 3);

-- 13.
SELECT FIRST_NAME, LAST_NAME
FROM BVEASEY.OWNER
WHERE EXISTS
	( SELECT *
	FROM BVEASEY.CONDO_UNIT
	WHERE CONDO_UNIT.OWNER_NUM = OWNER.OWNER_NUM
	AND BDRMS = 3);

-- 14.
SELECT FST.UNIT_NUM, SEC.UNIT_NUM, FST.SQR_FT
FROM BVEASEY.CONDO_UNIT FST,BVEASEY.CONDO_UNIT SEC
WHERE FST.SQR_FT = SEC.SQR_FT 
AND FST.UNIT_NUM < SEC.UNIT_NUM
ORDER BY FST.UNIT_NUM, SEC.UNIT_NUM;

-- 15.
SELECT SQR_FT, OWNER.OWNER_NUM, LAST_NAME, FIRST_NAME, LOCATION_NUM
FROM BVEASEY.CONDO_UNIT, BVEASEY.OWNER
WHERE LOCATION_NUM = 1
AND OWNER.OWNER_NUM = CONDO_UNIT.OWNER_NUM;

-- 16.
SELECT SQR_FT, OWNER.OWNER_NUM, LAST_NAME, FIRST_NAME, LOCATION_NUM, BDRMS
FROM BVEASEY.CONDO_UNIT, BVEASEY.OWNER
WHERE LOCATION_NUM = 1
AND BDRMS = 3
AND OWNER.OWNER_NUM = CONDO_UNIT.OWNER_NUM;

-- 17.
SELECT LOCATION_NUM, UNIT_NUM, CONDO_FEE, BDRMS
FROM BVEASEY.CONDO_UNIT
WHERE BDRMS = 1
UNION
SELECT LOCATION_NUM, UNIT_NUM, CONDO_FEE, BDRMS
FROM BVEASEY.OWNER, BVEASEY.CONDO_UNIT
WHERE STATE = 'FL'
AND OWNER.OWNER_NUM = CONDO_UNIT.OWNER_NUM;

-- 18.
SELECT LOCATION_NUM, UNIT_NUM, CONDO_FEE, BDRMS
FROM BVEASEY.CONDO_UNIT, BVEASEY.OWNER
WHERE BDRMS = 1
AND STATE = 'FL'
AND OWNER.OWNER_NUM = CONDO_UNIT.OWNER_NUM;

-- 19.
SELECT LOCATION_NUM, UNIT_NUM, CONDO_FEE, BDRMS
FROM BVEASEY.CONDO_UNIT
WHERE BDRMS != 1
AND OWNER_NUM NOT IN
	(SELECT OWNER_NUM
	FROM BVEASEY.OWNER
	WHERE STATE <> 'DE');

-- 20.
SELECT SERVICE_ID, CONDO_ID
FROM BVEASEY.SERVICE_REQUEST
WHERE EST_HOURS > ANY
	(SELECT EST_HOURS
	FROM BVEASEY.SERVICE_REQUEST
	WHERE CATEGORY_NUM = 5);
	
-- 21.
SELECT SERVICE_ID, CONDO_ID
FROM BVEASEY.SERVICE_REQUEST
WHERE EST_HOURS > ALL
	(SELECT EST_HOURS
	FROM BVEASEY.SERVICE_REQUEST
	WHERE CATEGORY_NUM = 5);

-- 22.
SELECT CONDO_UNIT.CONDO_ID, SQR_FT, OWNER_NUM, SERVICE_ID, EST_HOURS, SPENT_HOURS, CATEGORY_NUM
FROM BVEASEY.CONDO_UNIT, BVEASEY.SERVICE_REQUEST
WHERE CATEGORY_NUM = 4
AND CONDO_UNIT.CONDO_ID = SERVICE_REQUEST.CONDO_ID;

-- 23.
SELECT CONDO_UNIT.CONDO_ID, SQR_FT, OWNER_NUM, SERVICE_ID, EST_HOURS, SPENT_HOURS, CATEGORY_NUM
FROM BVEASEY.CONDO_UNIT
LEFT JOIN BVEASEY.SERVICE_REQUEST
ON CONDO_UNIT.CONDO_ID = SERVICE_REQUEST.CONDO_ID;

-- 24.
SELECT OWNER_NUM, UPPER(FIRST_NAME) AS UPPERCASE_FIRST, LOWER(LAST_NAME) AS LOWERCASE_LAST
FROM BVEASEY.OWNER;

-- 25.
SELECT OWNER_NUM, FIRST_NAME, LAST_NAME, CITY
FROM BVEASEY.OWNER
WHERE UPPER(CITY) = 'BOWTON';

-- 26.
SELECT LOCATION_NUM, UNIT_NUM, CONDO_UNIT.OWNER_NUM, LAST_NAME, CONDO_FEE, ROUND((CONDO_FEE - (CONDO_FEE * .025)),0) 
AS DISCOUNTED_FEE
FROM BVEASEY.CONDO_UNIT, BVEASEY.OWNER
WHERE CONDO_UNIT.OWNER_NUM = OWNER.OWNER_NUM;

-- *************************************************************
-- Generate Stored Procedure Query Results
-- *************************************************************

-- 27.
EXECUTE BVEASEY.DISP_OWNER_NAME 'YO117';

-- 28.
EXECUTE BVEASEY.DISP_CONDO_INFO '1084';
